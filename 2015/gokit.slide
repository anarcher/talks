Gokit
Gophercon Korea 2015

anarcher
anarcher@gmail.com


* Gokit 소개 

- Gokit에 관심을 가지게 된 이유
- Gokit의 구조 

* RPC Server 작성하기 

.play gokit/hello_netrpc/hello.go  /START1/,/STOP1/

.code gokit/hello_netrpc/hello.go /S:HANDLER1/,/E:HANDLER1/

* 

- 입력받은 a,b를 더하는 비지니스 로직에 대한  RPC(net/rpc) 서버를 만들었다. 
- 여기서, 실제로 서비스를 하기 위해서 무엇을 더해야 할까?

.image gokit/Finagle+Diagram.png

.caption https://blog.twitter.com/2011/finagle-a-protocol-agnostic-rpc-system

* (공통적인?!) 필요한 기능 

여러 서버가 각기 다른 Transport(HTTP/JSON,gRPC,Thirft,Protobuf)을 사용하더라도, 비슷한 기능이 필요하다 

- 운영중인 서버의 상태를 모니터링하고 싶다. 

    - package log
    - package metric
    - package tracing

- 다른 서버/서비스에 접속하기 위해,접속 가능한 접속 정보를 알거나 알려주어야 한다. 

    - service discovery
    - package loadbalancer

- 네트웍 요청에 대한 제한을 주는 등으로 가능한 안정성을 부여하고 싶다. 

    - package ratelimit
    - package circuitbreaker

- 기타 등등 

* Go kit : a distributed programming toolkit 

.image gokit/gokit-domains.png

.caption http://www.gophercon.com/talks/go-kit/

* package endpoint

    // Endpoint is the fundamental building block of servers and clients.
    // It represents a single RPC method.
    type Endpoint func(ctx context.Context, request interface{}) (response interface{}, err error)

    // Middleware is a chainable behavior modifier for endpoints.
    type Middleware func(Endpoint) Endpoint


- Endpoint은 하나의 RPC 메소드를 나타낸다 
- Gokit의 가장 기본적인 인터페이스 
- Middleware : Endpoint을 받아서 Endpoint을 반환하는 함수로 Endpoint의 기능을 확장한다. 

    - ratelimit
    - tracing
    - circuitbreaker
    - loadbalancer
    - ...

* StringService

.code gokit/stringsvc/main.go /S:SERVICE/,/E:SERVICE/

- `StringService` 인터페이스로 비지니스 모델을 정의한다. 

* Request와 Response

.code gokit/stringsvc/main.go /S:RR/,/E:RR/

- `StringService` 의 `RPC` 메소드의 요청( `Request` )와 응답( `Response` )을 `struct` 으로 구성 

* Endpoint

    type Endpoint func(ctx context.Context, request interface{}) (response interface{}, err error)

.code gokit/stringsvc/main.go /S:ENDPOINT/,/E:ENDPOINT/

* Transport

.code gokit/stringsvc/main.go /S:NETRPC_BINDING1/,/E:NETRPC_BINDING1/  

- `Endpoint` 을 `RPC` 라이브러리(net/rpc,grpc,thrift,...)에 필요한 형태로 사용할수 있도록
- `HTTP` 의 경우, `github.com/go-kit/kit/transport/http` 에 helper struct가 있다 

    uppercaseHandler := httptransport.Server{
        Context:    ctx,
        Endpoint:   makeUppercaseEndpoint(svc),
        DecodeFunc: decodeUppercaseRequest,
        EncodeFunc: encodeResponse,
    }
    countHandler := httptransport.Server{
        Context:    ctx,
        Endpoint:   makeCountEndpoint(svc),
        DecodeFunc: decodeCountRequest,
        EncodeFunc: encodeResponse,
    }

* context.Context

- http://blog.golang.org/context

    type Context interface {
        Done() <-chan struct{}                   // closed when this Context is canceled
        Err() error                              // why this Context was canceled
        Deadline() (deadline time.Time, ok bool) // when this Context will be canceled
        Value(key interface{}) interface{}       // data associated with this Context
    }

- Context들은 계층구조를 가진다 (상위 Context의 value가 파생된 Context에게 전달된다)

    type CancelFunc
    type Context
        func Background() Context
        func TODO() Context
        func WithCancel(parent Context) (ctx Context, cancel CancelFunc)
        func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)
        func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)
        func WithValue(parent Context, key interface{}, val interface{}) Context

*   

.code gokit/stringsvc/main.go /S:NETRPC_BINDING2/,/E:NETRPC_BINDING2/  

*   

.code gokit/stringsvc/main.go /S:NETRPC_BINDING3/,/E:NETRPC_BINDING3/  


* Main

.play gokit/stringsvc/main.go /S:MAIN1/,/E:MAIN1/  

* Client

.code gokit/stringsvc/main.go /S:CLIENT/,/E:CLIENT/

- Client도 역시...

* Example: LRU Cache Endpoint

.play gokit/lrucache/main.go /START1/,/STOP1/

* 

.code gokit/lrucache/main.go /S:MAIN/,/E:MAIN/

* package log

.play gokit/stringsvc-log/main.go  /S:NEW_LOG/,/E:NEW_LOG/
.code gokit/stringsvc-log/main.go  /S:LOG_MW/,/E:LOG_MW/

* package metric

- `counters` , `gauges` , `histograms` 에 대한 공통적인 인터페이스를 제공
- `expvar` , `statsd` , `prometheus` 에 대한 어댑터 제공


    requests := metrics.NewMultiCounter(
            expvar.NewCounter("requests"),
            statsd.NewCounter(ioutil.Discard, "requests_total", time.Second),
            prometheus.NewCounter(stdprometheus.CounterOpts{
                    Namespace: "addsvc",
                    Subsystem: "add",
                    Name:      "requests_total",
                    Help:      "Total number of received requests.",
                    }, []string{}),
    )

    func metric(requests metrics.Counter) endpoint.Middleware {
        return func(next endpoint.Endpoint) endpoint.Endpoint {
                return func(ctx context.Context, request interface{}) (interface{}, error) {
                    requests.Add(1)
                    return next(ctx,request)
                }
        }
    }

* package ratelimit

.code gokit/token_bucket.go /START/,/STOP/

- github.com/juju/ratelimit

.code gokit/token_bucket.go /S:USE/,/E:USE/

* package circuitbreaker

.code gokit/handy_breaker.go /START/,/STOP/

* 

.image gokit/cb.png _ 350

.caption http://martinfowler.com/bliki/CircuitBreaker.html

* package loadbalancer

    import (
        "github.com/go-kit/kit/loadbalancer"
        "github.com/go-kit/kit/loadbalancer/dnssrv"
    )

    func main() {
        // Construct a load balancer for foosvc, which gets foosvc instances by
        // polling a specific DNS SRV name.
        p := dnssrv.NewPublisher("foosvc.internal.domain", 5*time.Second, fooFactory, logger)
        lb := loadbalancer.NewRoundRobin(p)

        // Get a new endpoint from the load balancer.
        endpoint, err := lb.Endpoint()
        if err != nil {
            panic(err)
        }

        // Use the endpoint to make a request.
        response, err := endpoint(ctx, request)
    }

    func fooFactory(instance string) (endpoint.Endpoint, error) {
        // Convert an instance (host:port) to an endpoint, via a defined transport binding.
    }

* 

    func main() {
        p := dnssrv.NewPublisher("foosvc.internal.domain", 5*time.Second, fooFactory, logger)
        lb := loadbalancer.NewRoundRobin(p)
        endpoint := loadbalancer.Retry(3, 5*time.Seconds, lb) 

        response, err := endpoint(ctx, request) // requests will be automatically load balanced
    }

- 현재 `dnssrv` 와 `static` 지원 
- `consul` , `etcd` , `zookeeper` 등 지원 예정 


* package tracing

    func AnnotateServer(newSpan NewSpanFunc, c Collector) endpoint.Middleware {
        return func(next endpoint.Endpoint) endpoint.Endpoint {
            return func(ctx context.Context, request interface{}) (interface{}, error) {
                span, ok := fromContext(ctx)
                if !ok {
                    span = newSpan(newID(), newID(), 0)
                    ctx = context.WithValue(ctx, SpanContextKey, span)
                }
                span.Annotate(ServerReceive)
                defer func() { span.Annotate(ServerSend); c.Collect(span) }()
                return next(ctx, request)
            }
        }
    }

    // Server-side
    var server endpoint.Endpoint
    server = makeEndpoint() // for your service
    server = zipkin.AnnotateServer(spanFunc, collector)(server)
    go serveViaHTTP(server)

- `Appdash` 은 계획중

* 

.image gokit/zipkin.png 360 _
.caption https://blog.twitter.com/2012/distributed-systems-tracing-with-zipkin


* endpoint.Chain function

.link https://github.com/go-kit/kit/pull/96 PR#96
.link https://github.com/go-kit/kit/pull/95 PR#95
.link https://github.com/justinas/alice  Painless middleware chaining for Go

    mw1 := outer(key,val)
    mw2 := inter(params)
    e1 := endpoint.Chain(mw1,mw2)(e1)
    e2 := endpoint.Chain(mw1,mw2)(e2)

    e := endpoint.Chain(
       annotate("first"),
       annotate("second"),
       annotate("third"),
    )(myEndpoint)



