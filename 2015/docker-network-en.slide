Multi-Host networking with Docker
OpenContainer Korea 2015
5 Sep 2015

anarcher
anarcher@gmail.com

* Multi-Host networking with docker 

.image docker-network/docker-turtles-communication.jpg

* Demo

- It's only available with the experimental build of docker
- It was unveiled with docker engine 1.7 in dockercon 2015
- Release with docker engine 1.9 release?

* Docker network UI

.code docker-network/network-ui.sh

Create networks,removing or listing


    docker network create -d <plugin_name> foo

    $ docker network create foo
    aae601f43744bc1f57c515a16c8c7c4989a2cad577978a32e6910b799a6bccf6
    $ docker network create -d overlay bar
    d9989793e2f5fe400a58ef77f706d03f668219688ee989ea68ea78b990fa2406

* Docker service UI

.code docker-network/service-ui.sh

When `docker run`, Can use `--publish-service` option 

    docker run -itd --publish-service db.foo postgres

Or can use `docker service publish` and `docker service attach` for linking a container with a service.

    $ docker service publish my-service.foo
    ec56fd74717d00f968c26675c9a77707e49ae64b8e54832ebf78888eb116e428
    $ docker service attach a0ebc12d3e48 my-service.foo


* Docker daemon & libkv 

- docker-machine create

    docker-machine --debug create \
        -d virtualbox \
        --virtualbox-boot2docker-url=https://github.com/anarcher/boot2docker-experimental/releases/download/1.9/boot2docker-1.9.iso \
        --engine-opt="kv-store=consul:$(docker-machine ip infra):8500" \
        --engine-label="com.docker.network.driver.overlay.bind_interface=eth1" \
        --engine-label="com.docker.network.driver.overlay.neighbor_ip=$(docker-machine ip demo0)" demo1

- docker daemon 

    docker daemon 
        --kv-store=consul:consul-host:8500 \ 
        --label=com.docker.network.driver.overlay.bind_interface=eth1 \
        --label=com.docker.network.driver.overlay.neighbor_ip=10.254.101.21

- Serf([[http://serfdom.io]]) is used to cluster membership

- docker/libkv(--kv-store) is used to the metadata for docker network,docker service
 
* Overlay network driver

- Uses VXLAN(Virtual eXtensible Local Area Network) 

    - Support from Linux(3.7) 
    - Configure (Logical) L2 Network on L3 Networks
    - Packet encapsulation via IP/UDP

- Uses serf([[http://serfdom.io]]) for searching other network node(docker engine)

- Uses Linux netns(network namespace) 
    - Each namespaces are possible to have an indepenent network environment
    - /var/run/docker/netns/

* docker/libnetwork

- Separates the network part from Docker engine (Docker engine is also one of libnetwork users too)
- An Implementation of CMD(Container Network Model) 
- docker/libnetwork has also  implementations absout host,bridge which are docker engine's default network features)
- Driver based networking (These are two type drivers. builtin driver and remote drvier)

.image docker-network/docker-libnetwork.png _ 600 

* CNM : Container Network Model 

.image docker-network/cnm-model.jpg _ 600

- Sandbox : Isolation environment for containers' networks
    - IP,MAC,Route,DNS ; Linux netns,FreeBSD Jail
- Endpoint : A network interface to communicate in a specific network
    - The endpoint’s lifetime is completely separate from the container’s lifetime
- Network : A network is a collection of endpoints that are allowed to communicate with each other. 
    - An Endpoint can belong to only one network

* Remote network driver plugin

- JSON/RPC/HTTP

- Plugin discovery
    - /etc/docker/plugin/[name].spec|.sock|.json
    
- API
    - /Plugin.Activate
    - /NetworkDriver.CreateNetwork
    - /NetworkDriver.DeleteNetwork
    - /NetworkDriver.CreateEndpoint
    - /NetworkDriver.EndpointOperInfo
    - /NetworkDriver.DeleteEndpoint
    - /NetworkDriver.Join
    - /NetworkDriver.Leave

